script.
   const WORKSPACE = '#{W}';
   const meta = !{meta};
   const action = ['update', 'create'].includes(meta.action) ? 'form' : meta.action;
   const resources = (meta.__DOCTYPE__?.resources?.rows || []).filter(r => r.apply_on === 'all' || r.apply_on === action);

   function loadStylesheet(href, { callback, options } = {}) {
    const { defer = true, position = "before", target = null } = options || {};

    return new Promise((resolve, reject) => {
        const existingLink = document.querySelector(`link[href="${href}.css"]`);

        if (existingLink) {
          resolve();
          callback && callback();
          return;
        }
    
        const link = document.createElement('link');
        link.rel = 'stylesheet';
        link.href = href+".css";
        link.defer = defer;
        link.onload = () => {
          resolve();
          callback && callback();
        }
        link.onerror = () => {
          reject();
        }

        if(target){
          const Target = document.head.querySelector(target);

          if(position === "before"){
            Target.parentNode.insertBefore(link, target);
          }else{
            Target.parentNode.insertBefore(link, Target.nextSibling);
          }
        }else{
          document.head.insertBefore(link, document.head.firstChild);
        }
      });
        /*return new Promise((resolve, reject) => {
            const link = document.createElement('link');
            link.rel = 'stylesheet'; 
            link.href = url;
            link.onload = resolve;
            link.onerror = reject;

            document.head.appendChild(link);
        });*/
    }

    function loadScript(src, callback, options = { async: true}) {
        return new Promise((resolve, reject) => {
            const existingScript = document.querySelector(`script[src="${src}.js"]`);
            window.scripts ??= {};
            window.scripts[src] = window.scripts[src] || {loaded: false, callbacks: []};

            const makeScript = () => {
                const script = document.createElement('script');
                script.src = src + ".js";
                script.async = options.async;
                script.onload = () => {
                    window.scripts[src].callbacks.forEach((callback) => {
                        callback();
                    });

                    window.scripts[src].loaded = true;
                    resolve();
                }
                script.onerror = () => {
                    window.scripts[src].loaded = false;
                    reject();
                }
                document.head.appendChild(script);
            }
            
            if (existingScript) {
                if(window.scripts[src].loaded){
                    resolve(callback && callback());
                }else{
                    resolve(callback && window.scripts[src].callbacks.push(callback));
                }
                //resolve();
            }else{
                callback && window.scripts[src].callbacks.push(callback);
                makeScript();
            }
        });
    }
   Promise.all([
       import(`/components/element-manage.js`),
       import(`/gui/workspace/${WORKSPACE}-workspace.js`),
       import('#{client_importer}'),
       ...resources.map(r => {
            if (r.type.toLowerCase() === 'js') {
                loadScript(r.path);
                //return import(r.path + '.js');
            } else if (r.type.toLowerCase() === 'css') {
                return loadStylesheet(r.path);
            }
            return Promise.resolve();
        })
   ]).then(([elementManage, workspace, app_imported]) => {
        new elementManage.default().initialize().then(() => {
            const domContainer = document.querySelector("#app-root");
            const root = ReactDOM.createRoot(domContainer);
            root.render(
                React.createElement(workspace.default, {
                    meta: !{workspace},
                    documents: {
                        "!{key}": {
                            module: app_imported,
                            meta: {...meta, key: '#{key}'},
                            active: true
                        }
                    }
                })
            );
        });
   });