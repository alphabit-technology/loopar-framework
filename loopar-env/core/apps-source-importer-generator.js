import fs from "fs";
import path from "path";
const __dirname = process.env.PWD
const apps = fs.readdirSync(path.resolve(__dirname, "apps"));
const exportsNames = [];

const nameToCamelCase = (str) => {
   return str.replace(/[-\s]/g, '');
   return str
      // Primero reemplaza los guiones y espacios y convierte la siguiente letra a mayúscula
      .replace(/[-\s](.)/g, (match, letter) => letter.toUpperCase())
      // Luego convierte la primera letra de la cadena resultante a mayúscula
      .replace(/^(.)/, (match, letter) => letter.toUpperCase());
}

apps.forEach(app => {
   if (fs.lstatSync(path.resolve(__dirname, "apps", app)).isDirectory()) {
      const modules = fs.readdirSync(path.resolve(__dirname, `apps/${app}/modules`));
      modules.forEach(module => {
         const documents = fs.readdirSync(path.resolve(__dirname, `apps/${app}/modules/${module}`));
         documents.forEach(document => {
            const clientFiles = fs.readdirSync(path.resolve(__dirname, `apps/${app}/modules/${module}/${document}/client`));

            clientFiles.forEach(clientFile => {
               if(clientFile.split(".")[1] === "jsx")
               exportsNames.push(clientFile);
            });
         });
      });
   }
});

export default function AppsSourceImporterGenerator() {
   return `
/**
***********************************************
* This is autogenerated file, do not edit it. *
***********************************************

* @file app-source-loader.js
* @description Elements is a library that allows you to create elements in a simple way.
* @version 1.0.0
* @license MIT
* @author @alphabit
* @see {@link}
**/

${exportsNames.map(e => `import ${nameToCamelCase(e.split(".")[0])} from "#${e.split(".")[0]}";`).join("\n")}

export {
   ${exportsNames.map(e => nameToCamelCase(e.split(".")[0])).join(",\n   ")}
}
`
}
