import { elementsDict } from "./global/element-definition.js";
import { Capitalize, camelCase } from "./global/helper.js";

const defineComponents = Object.values(elementsDict)
   .filter(e => e.def.show_in_design !== false)
   .map((e) => e.def.element.toUpperCase());

const defineConstComponents = defineComponents.join(",").toLowerCase()
   .split(",").map((e) => {
      return Capitalize(camelCase(e));
   }).join(",");

export default function elementGenerator() {
   return `
/**
***********************************************
* This is autogenerated file, do not edit it. *
***********************************************

* @file elements.js
* @description Elements is a library that allows you to create elements in a simple way.
* @version 1.0.0
* @license MIT
* @author @alphabit
* @see {@link}
**/

'use strict';
import React from "react";
import {elementsDict} from "@global/element-definition";
//import DIALOG from "@dialog";
const DIALOG = await import("./dialog.jsx");
//import NOTIFY from "@notify";
const NOTIFY = await import("./notify.jsx");
${defineComponents.map((e) => `const ${e}_Comp = await import("./${e.replaceAll("_", "-").toLowerCase()}.jsx");`).join("\n")}
const HTML = await import("./base-component.jsx");
//import { elementManage } from "/@tools/element-manage.";

class Elements{
   constructor(options={}){
      this.props = options;
   }

   tag(tagName, content=null){
      this.props.tagName = tagName;
      return React.createElement(HTML, this.props, content);
   }
   
   dialog(options, content=null){
      return React.createElement(DIALOG, options, content);
   }
   
   notify(options, content=null){
      return React.createElement(NOTIFY, options, content);
   }
}
   
const components = {${defineComponents.reduce((a, e, key) => {
      return a + `   [${e}]: ${defineComponents[key]}_Comp.default,\n`
   }, "\n")}}

const getOptions = (options, content, e=null) => {
   if(content === null && (options && (typeof options === "string" || Array.isArray(options) || (typeof options === "object" && options.$$typeof === Symbol.for('react.element'))))){
      content = options;
      options = {};
   }
   options = options || {};
   options.tagName = e;
   if(e) options.element = e;

   return {options, content};
}

/**Define Elements ej: elements.div()**/
Object.entries(components).forEach(([element, classInstance]) => {
   Object.defineProperties(Elements.prototype, {
      [element]: {
         value: function (content=null) {
            this.props.element = element;
            this.props = {...this.props, def: elementsDict[element].def};
            this.props.meta ??= {};
            return React.createElement(classInstance, this.props, content);
         }
      }
   });
});
/**Define Elements**/

/**Define Components**/
const [${defineConstComponents}] = Object.entries(components).map(([e, classInstance]) => {
   return (options=null, content = null) => {
      const opts = getOptions(options, content);
      opts.options = {...opts.options, def: elementsDict[e].def};
      opts.options.meta ??= {};

      return React.createElement(classInstance, opts.options, opts.content);
   }
});

const Dialog = (options=null, content=null) => {
   return React.createElement(DIALOG, options, content);
}

const Notify = (options=null, content=null) => {
   return React.createElement(NOTIFY, options, content);
}
/**Define Components**/

export {
   ${defineConstComponents},Dialog,Notify
}

export const elements = (element) => {
   return new Elements(element);
}

export default (e, props, content) => {
   const elDict = elementsDict[e];
   if(!elDict){
      return React.createElement(e, props, content);
   }

   props = {...props, ...elDict};
   props.meta ??= {};

   return React.createElement(components[e], {...props, element: e}, content);
}
`
}
