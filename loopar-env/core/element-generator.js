import {elements_dict} from "./global/element-definition.js";
import {Capitalize} from "../public/tools/helper.js";

const define_tags = `a,abbr,address,area,article,aside,audio,b,base,bdi,bdo,blockquote,body,br,button,canvas,caption,cite,code,col,colgroup,data,datalist,dd,del,details,dfn,dialog,div,dl,dt,em,embed,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,i,iframe,image,input,ins,kbd,label,legend,li,link,main,map,mark,meta,meter,nav,noscript,object,ol,optgroup,option,output,p,param,picture,pre,progress,q,rp,rt,ruby,s,samp,script,section,select,slot,small,source,span,strong,style,sub,summary,sup,svg,table,tbody,td,template,textarea,tfoot,th,thead,time,title,tr,track,u,ul,video,wbr`
const define_components = Object.values(elements_dict)
   .filter(e => e.show_in_design !== false)
   .map((e) => e.element.toUpperCase());
const define_const_components = define_components.join(",").toLowerCase()
   .split(",").map((e) => Capitalize(e)).join(",");

export default function elementGenerator() {
   return  `
/**
***********************************************
* This is autogenerated file, do not edit it. *
***********************************************

* @file elements.js
* @description Elements is a library that allows you to create elements in a simple way.
* @version 1.0.0
* @license MIT
* @author @qubitcore
* @see {@link}
**/

'use strict';
import {elements_dict} from "/element-definition.js";
import DIALOG from "/components/common/dialog.js";
import NOTIFY from "/components/common/notify.js";
${define_components.map((e) => `import ${e}_Comp from "/components/elements/${e.replaceAll("_", "-").toLowerCase()}.js";`).join("\n")}
import {HTML} from "/components/base/html.js";
import {element_manage} from "/components/element-manage.js";

class Elements{
   constructor(options={}){
      this.props = options;
   }

   tag(tag_name, content=null){
      this.props.tag_name = tag_name;
      return React.createElement(HTML, this.props, content);
   }
   
   dialog(options, content=null){
      return React.createElement(DIALOG, options, content);
   }
   
   notify(options, content=null){
      return React.createElement(NOTIFY, options, content);
   }
}
   
const components = {${define_components.reduce((a, e, key) => {
      return a + `   [${e}]: ${define_components[key]}_Comp,\n`
   }, "\n")}}

const getOptions = (options, content, e=null) => {
   if(content === null && (options && (typeof options === "string" || Array.isArray(options) || (typeof options === "object" && options.$$typeof === Symbol.for('react.element'))))){
      content = options;
      options = {};
   }
   options = options || {};
   options.tag_name = e;
   if(e) options.element = e;

   return {options, content};
}

/**Define Elements ej: elements.div()**/
Object.entries(components).forEach(([element, classInstance]) => {
   Object.defineProperties(Elements.prototype, {
      [element]: {
         value: function (content=null) {
            this.props.element = element;
            this.props = {...this.props, ...elements_dict[element]};
            this.props.meta ??= {};
            this.props.meta.is_writable = elements_dict[element].is_writable;
            return React.createElement(classInstance, this.props, content);
         }
      }
   });
});
/**Define Elements**/

/**Define Components**/
const [${define_const_components}] = Object.entries(components).map(([e, classInstance]) => {
   return (options=null, content = null) => {
      const opts = getOptions(options, content, e);
      opts.options = {...opts.options, ...elements_dict[e]};
      opts.options.meta ??= {};
      opts.options.meta.is_writable = elements_dict[e].is_writable;

      return React.createElement(classInstance, opts.options, opts.content);
   }
});

const Dialog = (options=null, content=null) => {
   //options.id ??= element_manage.getUniqueKey();
   return React.createElement(DIALOG, options, content);
}

const Notify = (options=null, content=null) => {
   return React.createElement(NOTIFY, options, content);
}
/**Define Components**/

/**Define Tags**/
const[${define_tags}] = ['${define_tags.replaceAll(',',"','")}'].map((e) => {
   return (options=null, content = null) => {
      const opts = getOptions(options, content, e);

      return React.createElement(HTML, opts.options, opts.content);
   }
});
/**Define Tags**/

export {
   ${define_const_components},Dialog,Notify,
   ${define_tags}
}

export const elements = (element) => {
   return new Elements(element);
}

export const Element = (e, props, content) => {
   props = {...props, ...elements_dict[e]}
   props.meta ??= {};
   props.meta.is_writable = elements_dict[e].is_writable;

   return React.createElement(components[e], {...props, element: e}, content);
}
`
}
